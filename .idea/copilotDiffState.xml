<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/config.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config.json" />
              <option name="originalContent" value="{&#10;    &quot;PREPROCESSING&quot;: {&#10;        &quot;PATHS&quot;: {&#10;            &quot;rawTextData&quot;: &quot;.data/raw/X_train.csv&quot;,&#10;            &quot;rawImageFolder&quot;: &quot;.data/raw/images/&quot;,&#10;            &quot;rawLabels&quot;: &quot;.data/raw/Y_train.csv&quot;,&#10;            &quot;cleanTextTrainData&quot;: &quot;.data/clean/text_train.csv&quot;,&#10;            &quot;cleanTextTestData&quot;: &quot;.data/clean/text_test.csv&quot;,&#10;            &quot;cleanImageTrainFolder&quot;: &quot;.data/clean/image_train/&quot;,&#10;            &quot;cleanImageTestFolder&quot;: &quot;.data/clean/image_test/&quot;,&#10;            &quot;cleanTrainLabels&quot;: &quot;.data/clean/labels_train.csv&quot;,&#10;            &quot;cleanTestLabels&quot;: &quot;.data/clean/labels_test.csv&quot;&#10;        },&#10;        &quot;PIPELINE&quot;: {&#10;            &quot;toPipe&quot;: &quot;image&quot;,&#10;            &quot;sampleSize&quot;: 0,&#10;            &quot;trainSize&quot;: 0.8,&#10;            &quot;randomState&quot;: 42,&#10;            &quot;TEXTPIPELINE&quot;: {&#10;                &quot;CONSTANTS&quot;: {&#10;                    &quot;textualColumns&quot;: [&quot;designation&quot;, &quot;description&quot;],&#10;                    &quot;alphanumCharacters&quot;: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;,&#10;                    &quot;ponctuationCharacters&quot;: &quot;!\&quot;$%&amp;'()+,-./:;?[]^_`|~ &quot;,&#10;                    &quot;accentCharacters&quot;: &quot;àâäçéèêëîïôöùûüÿœæÀÂÄÇÉÈÊËÎÏÔÖÙÛÜŸŒÆ&quot;,&#10;                    &quot;maxTokenVectorizer&quot;: 128,&#10;                    &quot;embeddingDimension&quot;: 384&#10;                },&#10;                &quot;STEPS&quot;: [&#10;                    {&#10;                        &quot;stepName&quot;: &quot;character_cleaning&quot;,&#10;                        &quot;transformer&quot;: &quot;CharacterCleaner&quot;,&#10;                        &quot;params&quot;: {}&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;text_embedding&quot;,&#10;                        &quot;transformer&quot;: &quot;Vectorizer&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;model&quot;: &quot;paraphrase-multilingual-MiniLM-L12-v2&quot;&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;knn_imputing&quot;,&#10;                        &quot;transformer&quot;: &quot;CosineImputer&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;n_neighbors&quot;: 5,&#10;                            &quot;excluded_cols&quot;: [&quot;productid&quot;, &quot;imageid&quot;, &quot;description&quot;, &quot;designation&quot;]}&#10;                    }&#10;                ],&#10;                &quot;RESAMPLING&quot;: {&#10;                    &quot;active&quot;: false,&#10;                    &quot;params&quot;: {&#10;                        &quot;strategy&quot;: &quot;equal&quot;,&#10;                        &quot;kNeighbors&quot;: 5,&#10;                        &quot;randomState&quot;: 5&#10;                    }&#10;                }&#10;            },&#10;            &quot;IMAGEPIPELINE&quot;: {&#10;                &quot;CONSTANTS&quot; : {&#10;                    &quot;imageShape&quot;: [500, 500, 3],&#10;                    &quot;enableCuda&quot;: true,&#10;                    &quot;numThreads&quot;: 8&#10;                },&#10;                &quot;STEPS&quot;: [&#10;                    {&#10;                        &quot;stepName&quot;: &quot;rotation&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageRotation&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;degree&quot;: 180,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;hflip&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageHFlip&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;vflip&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageVFlip&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;crop&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageCrop&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_scale&quot;: 0.6,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;zoom&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageZoom&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_scale&quot;: 0.8,&#10;                            &quot;max_scale&quot;: 1.2,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;blur&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageBlur&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_kernel&quot;: 7,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;noise&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageNoise&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_std&quot;: 0.1,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;contrast&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageContrast&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_factor&quot;: 0.6,&#10;                            &quot;max_factor&quot;: 1.4,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;coloration&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageColoration&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;dropout&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageDropout&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_area&quot;: 0.02,&#10;                            &quot;max_area&quot;: 0.15,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;pixel_dropout&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImagePixelDropout&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_rate&quot;: 0.3,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    }&#10;                ]&#10;            }&#10;        }&#10;    },&#10;    &quot;TRAINING&quot;: {&#10;        &quot;SGD&quot;: {&#10;            &quot;PATHS&quot;: {&#10;                &quot;processedFeatures&quot;: &quot;data/processed/features_for_dt.csv&quot;,&#10;                &quot;transformers&quot;: &quot;data/processed/features_for_dt_transformers.pkl&quot;,&#10;                &quot;modelSave&quot;: &quot;models/sgd_classifier_{DATE}.pkl&quot;,&#10;                &quot;resultsSave&quot;: &quot;reports/sgd_results_{DATE}.json&quot;,&#10;                &quot;confusionMatrixSave&quot;: &quot;reports/figures/confusion_matrix_sgd_{DATE}.png&quot;,&#10;                &quot;classificationReportSave&quot;: &quot;reports/sgd_classification_report_{DATE}.txt&quot;&#10;            },&#10;            &quot;MODEL_PARAMS&quot;: {&#10;                &quot;random_state&quot;: 42,&#10;                &quot;max_iter&quot;: 1000,&#10;                &quot;tol&quot;: 1e-3,&#10;                &quot;n_jobs&quot;: -1&#10;            },&#10;            &quot;GRID_SEARCH&quot;: {&#10;                &quot;active&quot;: true,&#10;                &quot;cv&quot;: 5,&#10;                &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;                &quot;n_jobs&quot;: -1,&#10;                &quot;param_grid&quot;: {&#10;                    &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;, &quot;squared_hinge&quot;],&#10;                    &quot;alpha&quot;: [0.0001, 0.001, 0.01, 0.1],&#10;                    &quot;learning_rate&quot;: [&quot;constant&quot;, &quot;optimal&quot;, &quot;invscaling&quot;, &quot;adaptive&quot;],&#10;                    &quot;eta0&quot;: [0.01, 0.1, 1.0]&#10;                }&#10;            },&#10;            &quot;BAYES_SEARCH&quot;: {&#10;                &quot;active&quot;: false,&#10;                &quot;n_iter&quot;: 50,&#10;                &quot;cv&quot;: 5,&#10;                &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;                &quot;n_jobs&quot;: -1,&#10;                &quot;random_state&quot;: 42,&#10;                &quot;param_space&quot;: {&#10;                    &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;, &quot;squared_hinge&quot;],&#10;                    &quot;alpha&quot;: [1e-6, 1e-1],&#10;                    &quot;learning_rate&quot;: [&quot;constant&quot;, &quot;optimal&quot;, &quot;invscaling&quot;, &quot;adaptive&quot;],&#10;                    &quot;eta0&quot;: [0.001, 10.0]&#10;                }&#10;            },&#10;            &quot;EVALUATION&quot;: {&#10;                &quot;test_size&quot;: 0.2,&#10;                &quot;random_state&quot;: 42,&#10;                &quot;metrics&quot;: [&quot;f1_score&quot;, &quot;accuracy&quot;, &quot;precision&quot;, &quot;recall&quot;],&#10;                &quot;average&quot;: &quot;weighted&quot;&#10;            }&#10;        }&#10;    },&#10;    &quot;LOGS&quot;: {&#10;        &quot;filePath&quot;: &quot;.logs/{DATE}_&quot;,&#10;        &quot;baseFormat&quot;: &quot;%(asctime)s.%(msecs)03d [%(levelname)s] %(message)s&quot;,&#10;        &quot;dateFormat&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;    &quot;PREPROCESSING&quot;: {&#10;        &quot;PATHS&quot;: {&#10;            &quot;rawTextData&quot;: &quot;.data/raw/X_train.csv&quot;,&#10;            &quot;rawImageFolder&quot;: &quot;.data/raw/images/&quot;,&#10;            &quot;rawLabels&quot;: &quot;.data/raw/Y_train.csv&quot;,&#10;            &quot;cleanTextTrainData&quot;: &quot;.data/clean/text_train.csv&quot;,&#10;            &quot;cleanTextTestData&quot;: &quot;.data/clean/text_test.csv&quot;,&#10;            &quot;cleanImageTrainFolder&quot;: &quot;.data/clean/image_train/&quot;,&#10;            &quot;cleanImageTestFolder&quot;: &quot;.data/clean/image_test/&quot;,&#10;            &quot;cleanTrainLabels&quot;: &quot;.data/clean/labels_train.csv&quot;,&#10;            &quot;cleanTestLabels&quot;: &quot;.data/clean/labels_test.csv&quot;&#10;        },&#10;        &quot;PIPELINE&quot;: {&#10;            &quot;toPipe&quot;: &quot;image&quot;,&#10;            &quot;sampleSize&quot;: 0,&#10;            &quot;trainSize&quot;: 0.8,&#10;            &quot;randomState&quot;: 42,&#10;            &quot;TEXTPIPELINE&quot;: {&#10;                &quot;CONSTANTS&quot;: {&#10;                    &quot;textualColumns&quot;: [&quot;designation&quot;, &quot;description&quot;],&#10;                    &quot;alphanumCharacters&quot;: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;,&#10;                    &quot;ponctuationCharacters&quot;: &quot;!\&quot;$%&amp;'()+,-./:;?[]^_`|~ &quot;,&#10;                    &quot;accentCharacters&quot;: &quot;àâäçéèêëîïôöùûüÿœæÀÂÄÇÉÈÊËÎÏÔÖÙÛÜŸŒÆ&quot;,&#10;                    &quot;maxTokenVectorizer&quot;: 128,&#10;                    &quot;embeddingDimension&quot;: 384&#10;                },&#10;                &quot;STEPS&quot;: [&#10;                    {&#10;                        &quot;stepName&quot;: &quot;character_cleaning&quot;,&#10;                        &quot;transformer&quot;: &quot;CharacterCleaner&quot;,&#10;                        &quot;params&quot;: {}&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;text_embedding&quot;,&#10;                        &quot;transformer&quot;: &quot;Vectorizer&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;model&quot;: &quot;paraphrase-multilingual-MiniLM-L12-v2&quot;&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;knn_imputing&quot;,&#10;                        &quot;transformer&quot;: &quot;CosineImputer&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;n_neighbors&quot;: 5,&#10;                            &quot;excluded_cols&quot;: [&quot;productid&quot;, &quot;imageid&quot;, &quot;description&quot;, &quot;designation&quot;]}&#10;                    }&#10;                ],&#10;                &quot;RESAMPLING&quot;: {&#10;                    &quot;active&quot;: false,&#10;                    &quot;params&quot;: {&#10;                        &quot;strategy&quot;: &quot;equal&quot;,&#10;                        &quot;kNeighbors&quot;: 5,&#10;                        &quot;randomState&quot;: 5&#10;                    }&#10;                }&#10;            },&#10;            &quot;IMAGEPIPELINE&quot;: {&#10;                &quot;CONSTANTS&quot; : {&#10;                    &quot;imageShape&quot;: [500, 500, 3],&#10;                    &quot;enableCuda&quot;: true,&#10;                    &quot;numThreads&quot;: 8&#10;                },&#10;                &quot;STEPS&quot;: [&#10;                    {&#10;                        &quot;stepName&quot;: &quot;rotation&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageRotation&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;degree&quot;: 180,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;hflip&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageHFlip&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;vflip&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageVFlip&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;crop&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageCrop&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_scale&quot;: 0.6,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;zoom&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageZoom&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_scale&quot;: 0.8,&#10;                            &quot;max_scale&quot;: 1.2,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;blur&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageBlur&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_kernel&quot;: 7,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;noise&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageNoise&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_std&quot;: 0.1,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;contrast&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageContrast&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_factor&quot;: 0.6,&#10;                            &quot;max_factor&quot;: 1.4,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;coloration&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageColoration&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;dropout&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImageDropout&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;min_area&quot;: 0.02,&#10;                            &quot;max_area&quot;: 0.15,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    },&#10;                    {&#10;                        &quot;stepName&quot;: &quot;pixel_dropout&quot;,&#10;                        &quot;transformer&quot;: &quot;RandomImagePixelDropout&quot;,&#10;                        &quot;params&quot;: {&#10;                            &quot;max_rate&quot;: 0.3,&#10;                            &quot;p&quot;: 0.5&#10;                        }&#10;                    }&#10;                ]&#10;            }&#10;        }&#10;    },&#10;    &quot;TRAINING&quot;: {&#10;        &quot;SGD&quot;: {&#10;            &quot;PATHS&quot;: {&#10;                &quot;processedFeatures&quot;: &quot;data/processed/features_for_dt.csv&quot;,&#10;                &quot;transformers&quot;: &quot;data/processed/features_for_dt_transformers.pkl&quot;,&#10;                &quot;modelSave&quot;: &quot;models/sgd_classifier_{DATE}.pkl&quot;,&#10;                &quot;resultsSave&quot;: &quot;reports/sgd_results_{DATE}.json&quot;,&#10;                &quot;confusionMatrixSave&quot;: &quot;reports/figures/confusion_matrix_sgd_{DATE}.png&quot;,&#10;                &quot;classificationReportSave&quot;: &quot;reports/sgd_classification_report_{DATE}.txt&quot;&#10;            },&#10;            &quot;MODEL_PARAMS&quot;: {&#10;                &quot;random_state&quot;: 42,&#10;                &quot;max_iter&quot;: 1000,&#10;                &quot;tol&quot;: 1e-3,&#10;                &quot;n_jobs&quot;: -1&#10;            },&#10;            &quot;GRID_SEARCH&quot;: {&#10;                &quot;active&quot;: true,&#10;                &quot;cv&quot;: 5,&#10;                &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;                &quot;n_jobs&quot;: -1,&#10;                &quot;param_grid&quot;: {&#10;                    &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;, &quot;squared_hinge&quot;],&#10;                    &quot;alpha&quot;: [0.0001, 0.001, 0.01, 0.1],&#10;                    &quot;learning_rate&quot;: [&quot;constant&quot;, &quot;optimal&quot;, &quot;invscaling&quot;, &quot;adaptive&quot;],&#10;                    &quot;eta0&quot;: [0.01, 0.1, 1.0]&#10;                }&#10;            },&#10;            &quot;BAYES_SEARCH&quot;: {&#10;                &quot;active&quot;: false,&#10;                &quot;n_iter&quot;: 50,&#10;                &quot;cv&quot;: 5,&#10;                &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;                &quot;n_jobs&quot;: -1,&#10;                &quot;random_state&quot;: 42,&#10;                &quot;param_space&quot;: {&#10;                    &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;, &quot;squared_hinge&quot;],&#10;                    &quot;alpha&quot;: [1e-6, 1e-1],&#10;                    &quot;learning_rate&quot;: [&quot;constant&quot;, &quot;optimal&quot;, &quot;invscaling&quot;, &quot;adaptive&quot;],&#10;                    &quot;eta0&quot;: [0.001, 10.0]&#10;                }&#10;            },&#10;            &quot;EVALUATION&quot;: {&#10;                &quot;test_size&quot;: 0.2,&#10;                &quot;random_state&quot;: 42,&#10;                &quot;metrics&quot;: [&quot;f1_score&quot;, &quot;accuracy&quot;, &quot;precision&quot;, &quot;recall&quot;],&#10;                &quot;average&quot;: &quot;weighted&quot;&#10;            }&#10;        }&#10;    },&#10;    &quot;LOGS&quot;: {&#10;        &quot;filePath&quot;: &quot;.logs/{DATE}_&quot;,&#10;        &quot;baseFormat&quot;: &quot;%(asctime)s.%(msecs)03d [%(levelname)s] %(message)s&quot;,&#10;        &quot;dateFormat&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/rakuten_sgd_colab_250915_132807/config_colab.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/rakuten_sgd_colab_250915_132807/config_colab.json" />
              <option name="originalContent" value="{&#10;  &quot;TRAINING&quot;: {&#10;    &quot;SGD&quot;: {&#10;      &quot;DATA_PATH&quot;: &quot;data/processed/features_for_dt.csv&quot;,&#10;      &quot;GRID_SEARCH&quot;: {&#10;        &quot;active&quot;: true,&#10;        &quot;param_grid&quot;: {&#10;          &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;],&#10;          &quot;alpha&quot;: [0.0001, 0.001, 0.01],&#10;          &quot;learning_rate&quot;: [&quot;optimal&quot;, &quot;constant&quot;],&#10;          &quot;eta0&quot;: [0.01, 0.1]&#10;        },&#10;        &quot;cv_folds&quot;: 3,&#10;        &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;        &quot;n_jobs&quot;: -1&#10;      },&#10;      &quot;MODEL_PARAMS&quot;: {&#10;        &quot;max_iter&quot;: 1500,&#10;        &quot;tol&quot;: 1e-4,&#10;        &quot;random_state&quot;: 42&#10;      },&#10;      &quot;EVALUATION&quot;: {&#10;        &quot;test_size&quot;: 0.2,&#10;        &quot;random_state&quot;: 42,&#10;        &quot;stratify&quot;: true&#10;      }&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="{&#10;  &quot;TRAINING&quot;: {&#10;    &quot;SGD&quot;: {&#10;      &quot;DATA_PATH&quot;: &quot;data/processed/features_for_dt.csv&quot;,&#10;      &quot;GRID_SEARCH&quot;: {&#10;        &quot;active&quot;: true,&#10;        &quot;param_grid&quot;: {&#10;          &quot;loss&quot;: [&quot;hinge&quot;, &quot;log_loss&quot;, &quot;modified_huber&quot;],&#10;          &quot;alpha&quot;: [0.0001, 0.001, 0.01],&#10;          &quot;learning_rate&quot;: [&quot;optimal&quot;, &quot;constant&quot;],&#10;          &quot;eta0&quot;: [0.01, 0.1]&#10;        },&#10;        &quot;cv_folds&quot;: 3,&#10;        &quot;scoring&quot;: &quot;f1_weighted&quot;,&#10;        &quot;n_jobs&quot;: -1&#10;      },&#10;      &quot;MODEL_PARAMS&quot;: {&#10;        &quot;max_iter&quot;: 1500,&#10;        &quot;tol&quot;: 1e-4,&#10;        &quot;random_state&quot;: 42&#10;      },&#10;      &quot;EVALUATION&quot;: {&#10;        &quot;test_size&quot;: 0.2,&#10;        &quot;random_state&quot;: 42,&#10;        &quot;stratify&quot;: true&#10;      }&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements_dt.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements_dt.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>